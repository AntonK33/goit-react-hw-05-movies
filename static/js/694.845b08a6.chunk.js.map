{"version":3,"file":"static/js/694.845b08a6.chunk.js","mappings":"kRAIMA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,+OAcHE,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC7B,OACE,UAACL,EAAD,CAAYI,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaE,KAAK,OACjBD,IAGN,EC8CD,EAjEqB,WAAO,IAAD,IACjBE,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,SAE7C,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAYA,OAXAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBb,GACbc,MAAK,SAAAC,GACJN,EAASM,EACV,IACAC,OAAM,SAAAN,GACLC,EAASD,GACTO,QAAQC,IAAIR,EACb,GACJ,GAAE,CAACV,KAGF,4BACE,SAACJ,EAAD,CAAUC,GAAIO,EAAd,6BACA,4BACII,IAAS,yBAAME,KACjB,gBACES,IACEX,EAAMY,YAAN,UArBW,mCAqBX,OACsBZ,EAAMY,aACxB,sCAENC,IAAI,MAGN,4BACE,0BACGb,EAAMc,MADT,KACkBtB,EADlB,QAGA,wCAAgBQ,EAAMe,iBACtB,sCACA,uBAAIf,EAAMgB,YACV,oCACA,wBACGhB,EAAMiB,QACLjB,EAAMiB,OAAOC,KAAI,SAAAC,GAAK,OAAI,wBAAoBA,EAAMC,MAAjBD,EAAM3B,GAAnB,aAI9B,2BACE,yBACE,SAAC,KAAD,CAAMH,GAAG,OAAOQ,OAAK,UAAOH,EAASG,OAArC,qBAIF,yBACE,SAAC,KAAD,CAAMR,GAAG,UAAUQ,OAAK,UAAOH,EAASG,OAAxC,2BAKJ,SAAC,EAAAwB,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,QAIP,C,+LCpEKC,EAAU,gCAEVC,EAAS,mCAAf,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,oGACqBC,EAAAA,EAAAA,IAAA,kEAC0CF,IAF/D,cACQG,EADR,yBAISA,EAAKC,KAAKC,SAJnB,2EAeeC,EAAc,GAAdA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA6BC,GAA7B,uFACqBL,EAAAA,EAAAA,IAAA,UACdH,EADc,gCACiBC,EADjB,qDACoEO,IAFzF,cACQJ,EADR,yBAISA,EAAKC,KAAKC,SAJnB,kEAYA,IAAMxB,EAAkB,SAACb,GACpB,OAAOwC,MAAM,GAAD,OAAIT,EAAJ,iBAAoB/B,EAApB,oBAAkCgC,EAAlC,oBACJlB,MAAK,SAAAC,GACF,OAAIA,EAAS0B,GACF1B,EAAS2B,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,0BACzB,GACZ,EAEKC,EAAoB,SAACC,GACvB,OAAOP,MAAM,GAAD,OAAIT,EAAJ,iBAAoBgB,EAApB,4BAAiDf,EAAjD,oBACPlB,MAAK,SAAAC,GACF,OAAIA,EAAS0B,GACF1B,EAAS2B,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,sBACzB,GACR,EAKKG,EAAiB,SAACC,GACnB,OAAOT,MAAM,GAAD,OAAIT,EAAJ,iBAAoBkB,EAApB,4BAAiDjB,IACrDlB,MAAK,SAAAC,GACF,OAAIA,EAAS0B,GACF1B,EAAS2B,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,mBACzB,GACZ,C","sources":["components/BackLink/BackLink.jsx","Pages/MovieDetails.jsx","components/Api/API_request.js"],"sourcesContent":["import { HiArrowLeft } from 'react-icons/hi';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n  :hover {\n    color: orangered;\n  }\n`;\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n","import { Outlet, useLocation, useParams, Link } from 'react-router-dom';\nimport { fetchMoviesInfo } from 'components/Api/API_request';\nimport { useEffect, useState } from 'react';\nimport { BackLink } from 'components/BackLink/BackLink';\nimport { Suspense } from 'react';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movie';\n  const baseImageURL = 'https://image.tmdb.org/t/p/w500';\n  const [movie, setMovie] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchMoviesInfo(id)\n      .then(response => {\n        setMovie(response);\n      })\n      .catch(error => {\n        setError(error);\n        console.log(error);\n      });\n  }, [id]);\n\n  return (\n    <div>\n      <BackLink to={backLinkHref}>Back to movies</BackLink>\n      <div>\n        {!movie && <div>{error}</div>}\n        <img\n          src={\n            movie.poster_path\n              ? `${baseImageURL}${movie.poster_path}`\n              : 'https://via.placeholder.com/500x750'\n          }\n          alt=\"\"\n        />\n\n        <div>\n          <h2>\n            {movie.title} ({id})\n          </h2>\n          <p>User Score: {movie.vote_average}</p>\n          <h3>Overview</h3>\n          <p>{movie.overview}</p>\n          <h3>Geners</h3>\n          <ul>\n            {movie.genres &&\n              movie.genres.map(genre => <li key={genre.id}>{genre.name}</li>)}\n          </ul>\n        </div>\n      </div>\n      <ul>\n        <li>\n          <Link to=\"cast\" state={{ ...location.state }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" state={{ ...location.state }}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from \"axios\";\nconst baseUrl = \"https://api.themoviedb.org/3/\";\n// const per_page = 12;\nconst APIkey = '5d369441bd67a61471936fd86df9d048';\n\nasync function onFetch() {\n  const resp = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${APIkey}`\n  );\n  return resp.data.results;\n}\n// const fetchRequest = (name,page) => {\n//     return fetch(`${baseUrl}?key=${API_KEY}&q=${name}&image_type=photo&orientation=horizontal&safesearch=true&page=${page}&per_page=${per_page}`)\n//         .then(response => {\n//             if (response.ok) {\n//                 return response.json();\n//             }\n//             return Promise.reject(new Error(`Oopps...no images with this name - ${this.props.inputName}`))\n//         })\n// }\nasync function onFetchSearch(inputName) {\n  const resp = await axios.get(\n    `${baseUrl}search/movie?api_key=${APIkey}&language=en-US&include_adult=false&query=${inputName}`\n  );\n  return resp.data.results;\n}\n\n// async function fetchMoviesInfo(id)  {\n//      const response = await axios.get(`${baseUrl}movie/${id}?api_key=${APIkey}&language=en-US`)\n//   return response.data.results;\n          \n// }\nconst fetchMoviesInfo = (id) => {\n     return fetch(`${baseUrl}movie/${id}?api_key=${APIkey}&language=en-US`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies info`))\n            })\n}\n\nconst fetchMovieReviews = (review_id) => {\n    return fetch(`${baseUrl}movie/${review_id}/reviews?api_key=${APIkey}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Oopps...no reviews`))\n        })\n}\n\n\n\n\nconst fetchMovieCast = (person_id) => {\n     return fetch(`${baseUrl}movie/${person_id}/credits?api_key=${APIkey}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no cast`))\n            })\n}\nexport {onFetch,onFetchSearch,fetchMoviesInfo, fetchMovieReviews, fetchMovieCast};\n"],"names":["StyledLink","styled","Link","BackLink","to","children","size","id","useParams","location","useLocation","backLinkHref","state","from","useState","movie","setMovie","error","setError","useEffect","fetchMoviesInfo","then","response","catch","console","log","src","poster_path","alt","title","vote_average","overview","genres","map","genre","name","Suspense","fallback","baseUrl","APIkey","onFetch","axios","resp","data","results","onFetchSearch","inputName","fetch","ok","json","Promise","reject","Error","fetchMovieReviews","review_id","fetchMovieCast","person_id"],"sourceRoot":""}