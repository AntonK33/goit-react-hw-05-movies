{"version":3,"file":"static/js/133.a751ea93.chunk.js","mappings":"6NAEaA,E,OAAeC,GAAAA,IAAH,iH,kBCuCzB,EApCa,WACX,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GACoB,IAApBA,EAASC,QAIbP,EAAU,YACVF,EAAUQ,IAJRN,EAAU,WAKb,IACAQ,OAAM,SAAAP,GACLC,EAASD,GACTD,EAAU,WACX,GACJ,GAAE,KAGD,4BACE,2CACY,SAAXD,IAAqB,SAACL,EAAD,yBACV,YAAXK,IAAwB,yCACb,aAAXA,IACC,UAACL,EAAD,2CACgCO,IAAS,yBAAMA,OAGrC,aAAXF,IAAyB,SAACU,EAAA,EAAD,CAAUZ,OAAQA,MAGjD,C,+LCtCKa,EAAU,gCAEVC,EAAS,mCAAf,SAEeP,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,oGACqBQ,EAAAA,EAAAA,IAAA,kEAC0CD,IAF/D,cACQE,EADR,yBAISA,EAAKC,KAAKC,SAJnB,2EAeeC,EAAc,GAAdA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA6BC,GAA7B,uFACqBL,EAAAA,EAAAA,IAAA,UACdF,EADc,gCACiBC,EADjB,qDACoEM,IAFzF,cACQJ,EADR,yBAISA,EAAKC,KAAKC,SAJnB,kEAYA,IAAMG,EAAkB,SAACC,GACpB,OAAOC,MAAM,GAAD,OAAIV,EAAJ,iBAAoBS,EAApB,oBAAkCR,EAAlC,oBACJN,MAAK,SAAAC,GACF,OAAIA,EAASe,GACFf,EAASgB,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,0BACzB,GACZ,EAEKC,EAAoB,SAACC,GACvB,OAAOP,MAAM,GAAD,OAAIV,EAAJ,iBAAoBiB,EAApB,4BAAiDhB,EAAjD,oBACPN,MAAK,SAAAC,GACF,OAAIA,EAASe,GACFf,EAASgB,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,sBACzB,GACR,EAKKG,EAAiB,SAACC,GACnB,OAAOT,MAAM,GAAD,OAAIV,EAAJ,iBAAoBmB,EAApB,4BAAiDlB,IACrDN,MAAK,SAAAC,GACF,OAAIA,EAASe,GACFf,EAASgB,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,mBACzB,GACZ,C,mGChEYK,EAAYnC,EAAAA,GAAAA,IAAH,6HAOToC,EAAcpC,EAAAA,GAAAA,IAAH,qHAQXqC,EAAYrC,EAAAA,GAAAA,GAAH,mG,SCUtB,EAxBiB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACZoC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACJ,EAAD,UACGjC,EAAOsC,KAAI,SAAAC,GAAK,OACf,SAACL,EAAD,WACE,UAAC,KAAD,CAAMM,GAAE,UAAKD,EAAMjB,IAAMmB,MAAO,CAAEC,KAAMN,GAAxC,WACE,gBACEO,IACEJ,EAAMK,YAAN,UARO,mCAQP,OACsBL,EAAMK,aACxB,sCAENC,IAAKN,EAAMO,SAEb,SAACX,EAAD,UAAYI,EAAMQ,WAVJR,EAAMjB,GADT,KAiBtB,C","sources":["Pages/Home/Home.styled.jsx","Pages/Home/Home.jsx","components/Api/API_request.js","components/FilmCard/FilmCard.styled.jsx","components/FilmCard/FilmCard.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Notification = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  text-align: center;\n  padding-top: 50px;\n`;\n","import { useEffect, useState } from 'react';\nimport { onFetch } from 'components/Api/API_request';\nimport { Notification } from './Home.styled';\nimport FilmCard from 'components/FilmCard/FilmCard';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    onFetch()\n      .then(response => {\n        if (response.length === 0) {\n          setStatus('rejected');\n          return;\n        }\n        setStatus('resolved');\n        setMovies(response);\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      });\n  }, []);\n\n  return (\n    <div>\n      <h1>Trending today</h1>\n      {status === 'idle' && <Notification>Start page</Notification>}\n      {status === 'pending' && <div>Loading....</div>}\n      {status === 'rejected' && (\n        <Notification>\n          Oopps...no movies was found.{!error && <div>{error}</div>}\n        </Notification>\n      )}\n      {status === 'resolved' && <FilmCard movies={movies} />}\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from \"axios\";\nconst baseUrl = \"https://api.themoviedb.org/3/\";\n// const per_page = 12;\nconst APIkey = '5d369441bd67a61471936fd86df9d048';\n\nasync function onFetch() {\n  const resp = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${APIkey}`\n  );\n  return resp.data.results;\n}\n// const fetchRequest = (name,page) => {\n//     return fetch(`${baseUrl}?key=${API_KEY}&q=${name}&image_type=photo&orientation=horizontal&safesearch=true&page=${page}&per_page=${per_page}`)\n//         .then(response => {\n//             if (response.ok) {\n//                 return response.json();\n//             }\n//             return Promise.reject(new Error(`Oopps...no images with this name - ${this.props.inputName}`))\n//         })\n// }\nasync function onFetchSearch(inputName) {\n  const resp = await axios.get(\n    `${baseUrl}search/movie?api_key=${APIkey}&language=en-US&include_adult=false&query=${inputName}`\n  );\n  return resp.data.results;\n}\n\n// async function fetchMoviesInfo(id)  {\n//      const response = await axios.get(`${baseUrl}movie/${id}?api_key=${APIkey}&language=en-US`)\n//   return response.data.results;\n          \n// }\nconst fetchMoviesInfo = (id) => {\n     return fetch(`${baseUrl}movie/${id}?api_key=${APIkey}&language=en-US`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies info`))\n            })\n}\n\nconst fetchMovieReviews = (review_id) => {\n    return fetch(`${baseUrl}movie/${review_id}/reviews?api_key=${APIkey}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Oopps...no reviews`))\n        })\n}\n\n\n\n\nconst fetchMovieCast = (person_id) => {\n     return fetch(`${baseUrl}movie/${person_id}/credits?api_key=${APIkey}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no cast`))\n            })\n}\nexport {onFetch,onFetchSearch,fetchMoviesInfo, fetchMovieReviews, fetchMovieCast};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 500px);\n  gap: 16px;\n  padding: 20px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { Container, CardWrapper, MovieName } from './FilmCard.styled';\n\nconst FilmCard = ({ movies }) => {\n  const location = useLocation();\n  const baseImageURL = 'https://image.tmdb.org/t/p/w500';\n  return (\n    <Container>\n      {movies.map(movie => (\n        <CardWrapper key={movie.id}>\n          <Link to={`${movie.id}`} state={{ from: location }}>\n            <img\n              src={\n                movie.poster_path\n                  ? `${baseImageURL}${movie.poster_path}`\n                  : 'https://via.placeholder.com/500x750'\n              }\n              alt={movie.title}\n            />\n            <MovieName>{movie.name}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n\nexport default FilmCard;\n"],"names":["Notification","styled","useState","movies","setMovies","status","setStatus","error","setError","useEffect","onFetch","then","response","length","catch","FilmCard","baseUrl","APIkey","axios","resp","data","results","onFetchSearch","inputName","fetchMoviesInfo","id","fetch","ok","json","Promise","reject","Error","fetchMovieReviews","review_id","fetchMovieCast","person_id","Container","CardWrapper","MovieName","location","useLocation","map","movie","to","state","from","src","poster_path","alt","title","name"],"sourceRoot":""}