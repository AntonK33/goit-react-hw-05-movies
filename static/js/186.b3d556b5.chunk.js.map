{"version":3,"file":"static/js/186.b3d556b5.chunk.js","mappings":"+SACMA,EAAU,gCAEVC,EAAS,mCAAf,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,oGACqBC,EAAAA,EAAAA,IAAA,kEAC0CF,IAF/D,cACQG,EADR,yBAISA,EAAKC,KAAKC,SAJnB,2EAeeC,EAAc,GAAdA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,oBAAA,WAA6BC,GAA7B,uFACqBL,EAAAA,EAAAA,IAAA,UACdH,EADc,gCACiBC,EADjB,qDACoEO,IAFzF,cACQJ,EADR,yBAISA,EAAKC,KAAKC,SAJnB,kEAYA,IAAMG,EAAkB,SAACC,GACpB,OAAOC,MAAM,GAAD,OAAIX,EAAJ,iBAAoBU,EAApB,oBAAkCT,EAAlC,oBACJW,MAAK,SAAAC,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,0BACzB,GACZ,EAEKC,EAAoB,SAACC,GACvB,OAAOT,MAAM,GAAD,OAAIX,EAAJ,iBAAoBoB,EAApB,4BAAiDnB,EAAjD,oBACPW,MAAK,SAAAC,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,sBACzB,GACR,EAKKG,EAAiB,SAACC,GACnB,OAAOX,MAAM,GAAD,OAAIX,EAAJ,iBAAoBsB,EAApB,4BAAiDrB,IACrDW,MAAK,SAAAC,GACF,OAAIA,EAASC,GACFD,EAASE,OAGbC,QAAQC,OAAO,IAAIC,MAAJ,mBACzB,GACZ,C,8EC9BD,UAhCgB,WACd,IAAQR,GAAOa,EAAAA,EAAAA,MAAPb,GACR,GAA8Bc,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAaA,OAXAC,EAAAA,EAAAA,YAAU,YACRV,EAAAA,EAAAA,IAAkBT,GACfE,MAAK,SAAAC,GACJa,EAAWb,EAASP,QACrB,IACAwB,OAAM,SAAAH,GACLC,EAASD,GACTI,QAAQC,IAAIL,EACb,GACJ,GAAE,CAACjB,KAGF,4BACIe,EAAQQ,SAAU,6CAAqBN,MACzC,wBACGF,GACCA,EAAQS,KAAI,SAAAC,GAAM,OAChB,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOzB,GADA,QAS3B,C","sources":["components/Api/API_request.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"https://api.themoviedb.org/3/\";\n// const per_page = 12;\nconst APIkey = '5d369441bd67a61471936fd86df9d048';\n\nasync function onFetch() {\n  const resp = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${APIkey}`\n  );\n  return resp.data.results;\n}\n// const fetchRequest = (name,page) => {\n//     return fetch(`${baseUrl}?key=${API_KEY}&q=${name}&image_type=photo&orientation=horizontal&safesearch=true&page=${page}&per_page=${per_page}`)\n//         .then(response => {\n//             if (response.ok) {\n//                 return response.json();\n//             }\n//             return Promise.reject(new Error(`Oopps...no images with this name - ${this.props.inputName}`))\n//         })\n// }\nasync function onFetchSearch(inputName) {\n  const resp = await axios.get(\n    `${baseUrl}search/movie?api_key=${APIkey}&language=en-US&include_adult=false&query=${inputName}`\n  );\n  return resp.data.results;\n}\n\n// async function fetchMoviesInfo(id)  {\n//      const response = await axios.get(`${baseUrl}movie/${id}?api_key=${APIkey}&language=en-US`)\n//   return response.data.results;\n          \n// }\nconst fetchMoviesInfo = (id) => {\n     return fetch(`${baseUrl}movie/${id}?api_key=${APIkey}&language=en-US`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies info`))\n            })\n}\n\nconst fetchMovieReviews = (review_id) => {\n    return fetch(`${baseUrl}movie/${review_id}/reviews?api_key=${APIkey}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Oopps...no reviews`))\n        })\n}\n\n\n\n\nconst fetchMovieCast = (person_id) => {\n     return fetch(`${baseUrl}movie/${person_id}/credits?api_key=${APIkey}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no cast`))\n            })\n}\nexport {onFetch,onFetchSearch,fetchMoviesInfo, fetchMovieReviews, fetchMovieCast};\n","import { fetchMovieReviews } from 'components/Api/API_request';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetchMovieReviews(id)\n      .then(response => {\n        setReviews(response.results);\n      })\n      .catch(error => {\n        setError(error);\n        console.log(error);\n      });\n  }, [id]);\n\n  return (\n    <div>\n      {!reviews.length && <div>No reviews yet {error}</div>}\n      <ul>\n        {reviews &&\n          reviews.map(review => (\n            <li key={review.id}>\n              <h2>{review.author}</h2>\n              <p>{review.content}</p>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["baseUrl","APIkey","onFetch","axios","resp","data","results","onFetchSearch","inputName","fetchMoviesInfo","id","fetch","then","response","ok","json","Promise","reject","Error","fetchMovieReviews","review_id","fetchMovieCast","person_id","useParams","useState","reviews","setReviews","error","setError","useEffect","catch","console","log","length","map","review","author","content"],"sourceRoot":""}