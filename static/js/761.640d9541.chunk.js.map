{"version":3,"file":"static/js/761.640d9541.chunk.js","mappings":"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","sources":["components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","Pages/Movie/Movie.styled.jsx","Pages/Movie/Movie.jsx","components/Api/API_request.js","components/FilmCard/FilmCard.styled.jsx","components/FilmCard/FilmCard.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const SearchbarH = styled.div`\n   {\n    top: 0;\n    left: 0;\n    position: sticky;\n    z-index: 1100;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 64px;\n    padding-right: 24px;\n    padding-left: 24px;\n    padding-top: 12px;\n    padding-bottom: 12px;\n    color: #fff;\n    background-color: rgb(66 68 82);\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n      0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  }\n`;\nexport const SearchForm = styled.form`\n   {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    max-width: 600px;\n    background-color: #fff;\n    border-radius: 3px;\n    overflow: hidden;\n  }\n`;\nexport const SearchFormButton = styled.button`\n   {\n    display: inline-block;\n    width: 48px;\n    height: 48px;\n    border: 0;\n    background-image: url('https://www.svgrepo.com/show/508172/search-alt.svg');\n    background-size: 40%;\n    background-repeat: no-repeat;\n    background-position: center;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n    &:hover {\n      opacity: 1;\n    }\n  }\n`;\nexport const SearchFormButtonLabel = styled.span`\n   {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    clip-path: inset(50%);\n    border: 0;\n  }\n`;\nexport const SearchFormInput = styled.input`\n   {\n    display: inline-block;\n    width: 100%;\n    font: inherit;\n    font-size: 20px;\n    border: none;\n    outline: none;\n    padding-left: 4px;\n    padding-right: 4px;\n    &::placeholder {\n      font: inherit;\n      font-size: 18px;\n    }\n  }\n`;\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 500px);\n  gap: 16px;\n  padding: 20px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import {\n  SearchbarH,\n  SearchForm,\n  SearchFormButton,\n  SearchFormButtonLabel,\n  SearchFormInput,\n} from './SearchBar.styled';\nimport { useState } from 'react';\n\nconst SearchBar = ({ onSubmit, movieSearch }) => {\n  const [name, setName] = useState('');\n\n  const searchName = e => {\n    setName(e.currentTarget.value.toLowerCase());\n  };\n\n  const submitForm = e => {\n    e.preventDefault();\n    if (name.trim() === '') {\n      alert('Type something in search input');\n      return;\n    }\n\n    onSubmit(name);\n    setName('');\n  };\n\n  return (\n    <SearchbarH>\n      <SearchForm onSubmit={submitForm}>\n        <SearchFormButton type=\"submit\">\n          <SearchFormButtonLabel>Search</SearchFormButtonLabel>\n        </SearchFormButton>\n\n        <SearchFormInput\n          onChange={searchName}\n          type=\"text\"\n          name=\"input\"\n          autocomplete=\"off\"\n          value={name}\n          autoFocus\n          autoComplete=\"off\"\n          placeholder=\"Search images and photos\"\n        />\n      </SearchForm>\n    </SearchbarH>\n  );\n};\n\nexport default SearchBar;\n","import styled from 'styled-components';\n\nexport const Notification = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n  text-align: center;\n  padding-top: 50px;\n`;\n","import { onFetchSearch } from 'components/Api/API_request';\nimport SearchBar from 'components/SearchBar/SearchBar';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport FilmCard from 'components/FilmCard/FilmCard';\nimport { Notification } from './Movie.styled';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movie = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const name = searchParams.get('query');\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!name) {\n      return;\n    }\n    setStatus('pending');\n\n    onFetchSearch(name)\n      .then(response => {\n        if (response.length === 0) {\n          setStatus('rejected');\n          return;\n        }\n        setMovies(response);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      });\n  }, [name]);\n\n  // const newSearch = name => {\n  //   setNameSearch(name);\n  //   setMovies([]);\n  const newSearch = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n  return (\n    <div>\n      <SearchBar onSubmit={newSearch} />\n      <div>\n        <h1>Trending today</h1>\n        {status === 'idle' && <Notification>Start page</Notification>}\n        {status === 'pending' && <div>Loading....</div>}\n        {status === 'rejected' && (\n          <Notification>\n            Oopps...no movies was found.{!error && <div>{error}</div>}\n          </Notification>\n        )}\n        {status === 'resolved' && <FilmCard movies={movies} />}\n      </div>\n    </div>\n  );\n};\n\nexport default Movie;\n","import axios from \"axios\";\nconst baseUrl = \"https://api.themoviedb.org/3/\";\n// const per_page = 12;\nconst APIkey = '5d369441bd67a61471936fd86df9d048';\n\nasync function onFetch() {\n  const resp = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${APIkey}`\n  );\n  return resp.data.results;\n}\n// const fetchRequest = (name,page) => {\n//     return fetch(`${baseUrl}?key=${API_KEY}&q=${name}&image_type=photo&orientation=horizontal&safesearch=true&page=${page}&per_page=${per_page}`)\n//         .then(response => {\n//             if (response.ok) {\n//                 return response.json();\n//             }\n//             return Promise.reject(new Error(`Oopps...no images with this name - ${this.props.inputName}`))\n//         })\n// }\nasync function onFetchSearch(inputName) {\n  const resp = await axios.get(\n    `${baseUrl}search/movie?api_key=${APIkey}&language=en-US&include_adult=false&query=${inputName}`\n  );\n  return resp.data.results;\n}\n\n// async function fetchMoviesInfo(id)  {\n//      const response = await axios.get(`${baseUrl}movie/${id}?api_key=${APIkey}&language=en-US`)\n//   return response.data.results;\n          \n// }\nconst fetchMoviesInfo = (id) => {\n     return fetch(`${baseUrl}movie/${id}?api_key=${APIkey}&language=en-US`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no movies info`))\n            })\n}\n\nconst fetchMovieReviews = (review_id) => {\n    return fetch(`${baseUrl}movie/${review_id}/reviews?api_key=${APIkey}&language=en-US`)\n        .then(response => {\n            if (response.ok) {\n                return response.json();\n            }\n\n            return Promise.reject(new Error(`Oopps...no reviews`))\n        })\n}\n\n\n\n\nconst fetchMovieCast = (person_id) => {\n     return fetch(`${baseUrl}movie/${person_id}/credits?api_key=${APIkey}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n\n                return Promise.reject(new Error(`Oopps...no cast`))\n            })\n}\nexport {onFetch,onFetchSearch,fetchMoviesInfo, fetchMovieReviews, fetchMovieCast};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 500px);\n  gap: 16px;\n  padding: 20px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n  > a {\n    text-decoration: none;\n  }\n`;\n\nexport const MovieName = styled.h3`\n  padding: 4px;\n  margin-top: 8px;\n  margin-bottom: 0;\n  color: black;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { Container, CardWrapper, MovieName } from './FilmCard.styled';\n\nconst FilmCard = ({ movies }) => {\n  const location = useLocation();\n  const baseImageURL = 'https://image.tmdb.org/t/p/w500';\n  return (\n    <Container>\n      {movies.map(movie => (\n        <CardWrapper key={movie.id}>\n          <Link to={`${movie.id}`} state={{ from: location }}>\n            <img\n              src={\n                movie.poster_path\n                  ? `${baseImageURL}${movie.poster_path}`\n                  : 'https://via.placeholder.com/500x750'\n              }\n              alt={movie.title}\n            />\n            <MovieName>{movie.name}</MovieName>\n          </Link>\n        </CardWrapper>\n      ))}\n    </Container>\n  );\n};\n\nexport default FilmCard;\n"],"names":["SearchbarH","styled","SearchForm","SearchFormButton","SearchFormButtonLabel","SearchFormInput","onSubmit","movieSearch","useState","name","setName","e","preventDefault","trim","alert","type","onChange","currentTarget","value","toLowerCase","autocomplete","autoFocus","autoComplete","placeholder","Notification","useSearchParams","searchParams","setSearchParams","get","movies","setMovies","status","setStatus","error","setError","useEffect","onFetchSearch","then","response","length","catch","query","FilmCard","baseUrl","APIkey","onFetch","axios","resp","data","results","inputName","fetchMoviesInfo","id","fetch","ok","json","Promise","reject","Error","fetchMovieReviews","review_id","fetchMovieCast","person_id","Container","CardWrapper","MovieName","location","useLocation","map","movie","to","state","from","src","poster_path","alt","title"],"sourceRoot":""}